% Script Name: StochasticCDFLearning_demo.m
% Author: Shengdong Zhang
% Description: This script demostrates how to use 3-layer neural network
%              to learn cumulative distribution function (CDF) from
%              empirical CDF data, and then use the learned network to
%              infer probability density function. The psudo data 
%              distribution is optional to be generated by one of the two 
%              mixture distributions ------ Bart Simpson distribution and 
%              two-uniforms-two-Gaussian distribution. Histogram and
%              empirical distribution of pseudo data are made for making
%              comparison between true density function and learned density
%              function.
%              

close all
clear

pdf_name = 'BartSimpson';    % This variable contains the string of 
                             % distribution name. Options are BartSimpson
                             % and TwoGauTwoUniform.
                             
numSamples = 1000;           % Number of pseudo data points to be generated

%% ======================================================================== 
% This part of codes generates data of specified distribution.

if strcmp(pdf_name, 'BartSimpson')
    hiddenSize = 16;         % Number of hidden nodes to learn CDF             
    randn('seed',1234)       % Fixed random seed for repeatible result
    
    % Generate pseudo data of specified distribution
    data = [randn(500,1);0.1*randn(100,1)-1;0.1*randn(100,1)-0.5;0.1*randn(100,1);0.1*randn(100,1)+0.5;0.1*randn(100,1)+1];
    
    d = max(data) - min(data);    % Compute the range of data 
    x = linspace(min(data)-0.05*d, max(data)+0.05*d, numSamples);

    % Define the true density function for making plots later
    true_pdf = 0.5*normpdf(x, 0, 1) + ...
               0.1*normpdf(x, -1, 0.1) + ...
               0.1*normpdf(x, -0.5, 0.1) + ...
               0.1*normpdf(x, 0, 0.1) + ...
               0.1*normpdf(x, 0.5, 0.1) + ...
               0.1*normpdf(x, 1, 0.1);
    phi=@(x)(exp(-.5*x.^2)/sqrt(2*pi));
    h=0.05;
    ksden=@(z)mean(phi((z-data)/h)/h);
    
    
elseif strcmp(pdf_name, 'TwoGauTwoUniform')
    hiddenSize = 8;          % Number of hidden nodes to learn CDF
    randn('seed',1234)       % Fixed random seed for repeatible result
    gau_left = 0.5*randn(500,1)-7;
    gau_right = 0.5*randn(500,1)+7;

    rand('seed',1234)
    uniform_left = 2*rand(500,1)-3;
    uniform_right = 2*rand(500,1)+1;
    
    % Generate pseudo data of specified distribution
    data = [gau_left;uniform_left;uniform_right;gau_right];
    
    d = max(data) - min(data);    % Compute the range of data 
    x = linspace(min(data)-0.05*d, max(data)+0.05*d, numSamples);

    % Define the true density function for making plots later
    true_pdf = 0.25*0.5*(x>=-3 & x<-1) + ...
               0.25*0.5*(x>=1 & x<3) + ...
               0.25*normpdf(x, -7, 0.5) + ...
               0.25*normpdf(x, 7, 0.5);   
    phi=@(x)(exp(-.5*x.^2)/sqrt(2*pi));
    h=0.1;
    ksden=@(z)mean(phi((z-data)/h)/h);
else
    error('Unknown PDF Name.') 
end

% Compute probability values y to make (x,y) pairs for regression 
% supervised learning

y = zeros(1,numSamples);
for i = 1:numSamples
    y(i) = sum(data<=x(i))/length(data);
end

% Plot the histogram and empirical CDF of the pseudo data.
figure; 
set(gcf,'position',[50 500 600 400])
subplot(2,1,1);
hist(data, 100)
% set(gcf,'position',[50 500 600 400])
xlabel('data');
ylabel('Frequency');
title('Histogram of Observed Data');

subplot(2,1,2);
plot(x, y)
xlabel('x');
ylabel('Probability');
title('Empirical CDF');

%% ========================================================================
% This part of codes build the neural net model and train it with a 
% stochastic optimization algorithm called adaptive delta.

% Define model parameters and training parameters
inputSize = 1;
lambda = 0;
batchSize = 100;
nb_epochs = 30000;

% Initiate model parameters
theta = initializeCDFParametersExp(hiddenSize, inputSize);

% Optimize parameters of the built neural net model;
% The output of the model will be displayed after each update
[opttheta,opttheta_rs] = Adadelta4CDFLearning(@expRegressionL2Cost, @expCDFoutput ,theta, x, y,...
                    inputSize, hiddenSize, lambda, batchSize, nb_epochs);
close figure 10

% Compute the output of the learned model
output = expCDFoutput(opttheta_rs, inputSize, hiddenSize, x);

% Infer PDF from the learned model
pdf = expPDFoutput(opttheta_rs, inputSize, hiddenSize, x);

%% ======================================================================== 
% This part of codes makes plots of CDF and PDF output of the learned model 
% and the target CDF and PDF

% Make plot of learned CDF vs empirical cdf
figure;plot(x, output,'b',x,y,'r')
set(gcf,'position',[50 0 600 400])
xlabel('x');
ylabel('Probability');
title('Output of Model using Tanh vs Empirical CDF');
axis([min(x) max(x) 0 1]);
legend('Model Output', 'Empirical CDF','Location','northwest');

% Make plot of infered PDF vs true PDF
figure;plot(x, pdf,'b',x,true_pdf,'r')
hold on
fplot(ksden,[min(x),max(x)],'k')
set(gcf,'position',[650 300 600 400]);
xlabel('x');
ylabel('Probability Density');
title('Inferred PDF vs True PDF');
legend('Inferred PDF', 'True PDF','KDE Estimated PDF','Location','northwest');
hold off
